{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Brian's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tutorials/rust-tutorial/","title":"Setting up a dev container for  <ul> <li>Primary author: Brian Bordeaux</li> <li>Reviewer: Nicholas Byers</li> </ul>","text":""},{"location":"tutorials/rust-tutorial/#rust-tutorial-for-comp423","title":"Rust Tutorial for COMP423 <p>Welcome to the Rust tutorial! In this guide, you'll learn how to set up a Rust development environment using a Dev Container, create a simple \"Hello COMP423\" program, and run it.</p>","text":""},{"location":"tutorials/rust-tutorial/#prerequisites","title":"Prerequisites","text":"<p>Make sure to have the follwing:</p> <ul> <li>Docker installed and running on your machine.</li> <li>Visual Studio Code (VSCode) </li> <li>Basic knowledge of Rust programming.</li> <li>A GitHub account.</li> <li>Install Dev containers extension in VS Code. </li> </ul>"},{"location":"tutorials/rust-tutorial/#step-1-setting-up-the-dev-container","title":"Step 1: Setting Up the Dev Container","text":"<p>We'll use a Dev Container to create a consistent development environment for our Rust project.</p>"},{"location":"tutorials/rust-tutorial/#11-create-the-devcontainerjson-file","title":"1.1 Create the <code>devcontainer.json</code> File","text":"<p>First we need to create a Git repository. In order to do this run:</p> <p>git init</p> <p>Now create a new github repo through the website.</p> <p>Then in the vs code terminal run: </p> <p>git remote add origin https://github.com//comp423-course-notes.git <p>Then create a .devcontainer folder and inside of that create a devcontainer.json file.</p> <p>Then inside of this file paste this:</p> <p>{   \"name\": \"COMP423 Course Notes\",   \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",   \"customizations\": {     \"vscode\": {       \"settings\": {},       \"extensions\": [         \"rust-lang.rust-analyzer\"  // Official Rust analyzer extension       ]     }   } }</p> <p>-name: This is simply the name of the container your working in and helps you keep containers organized when you have m ultiple -image: This tell you whats going into your docker container in this case it is everything we need in order to work with rust  -custiomization/vscode/extensions: This block allows us to add the rust analyiser extension with helps with the general coding processes with things like error checking</p>"},{"location":"tutorials/rust-tutorial/#step-2-writing-the-rust-program","title":"Step 2: Writing the Rust program","text":"<p>Now that we are setup lets make our rust project. First we need to make a new directory to store the project. This can be done by using:</p> <p>cargo new hello_comp423 --bin --vcs none</p> <p>hello_comp423 is the project name --bin tell us this is a binary project -vcs none tells cargo not to make a repo for you automatically</p> <p>You should also use the command rustc --version to make sure you have a recent version of rust.</p> <p>Now open the hello_comp423 directory then open the src directory, finally open the main.rs file and paste this in:</p> <p>fn main() {     println!(\"Hello COMP423\"); }</p> <p>Now run cargo build in your terminal this will compile your project and make the exectuable target/debug directory. <p>Finally to run the program you will do cargo run in the terminal where you should see the output Hello COMP423. <p>The diffrence between cargo build and cargo run is that cargo build puts the files together in a way that your machine can actually execuate them while cargo run actually executes the files which causes the program to run.</p> <p>Now that the program is ran do: git add . ** git commit -m  ** git push -u origin"}]}